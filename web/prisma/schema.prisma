// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -----------------------------------------------------------------------------
// Models for NextAuth.js and application domain (organizations, RBAC, tokens)
// -----------------------------------------------------------------------------

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  emailVerified DateTime?
  passwordHash  String?
  image         String?

  // NextAuth relations
  accounts Account[]
  sessions Session[]

  // App relations
  memberships Membership[]
  auditLogs   AuditLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// -----------------------------------------------------------------------------
// Organization and RBAC
// -----------------------------------------------------------------------------

model Organization {
  id        String       @id @default(cuid())
  name      String
  slug      String?      @unique

  memberships Membership[]
  auditLogs   AuditLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

model Membership {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           Role         @default(MEMBER)

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, organizationId])
}

model AuditLog {
  id             String       @id @default(cuid())
  userId         String?
  organizationId String?
  action         String
  ip             String?
  userAgent      String?
  createdAt      DateTime     @default(now())

  user         User?         @relation(fields: [userId], references: [id])
  organization Organization? @relation(fields: [organizationId], references: [id])
}

// -----------------------------------------------------------------------------
// One-time token tables for email verification and password reset
// Tokens are stored as SHA-256 hashes of random bytes
// -----------------------------------------------------------------------------

model EmailVerificationToken {
  id        String   @id @default(cuid())
  email     String
  tokenHash String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  tokenHash String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
}
